#Generate Sample Ids

import arcpy
arcpy.env.overwriteOutput = True

def scriptTool(parcels,samples):

    new_field='SAMPLE_ID'
    arcpy.management.AddField(samples,new_field,'TEXT',field_length=50)

    with arcpy.da.SearchCursor(parcels,['PCLBLOCK','PCLLOT','SHAPE@']) as cursor:
        for row in cursor:
            i=1
            sample_layer = arcpy.SelectLayerByLocation_management(samples,'INTERSECT',row[2])
            with arcpy.da.UpdateCursor(sample_layer,[new_field]) as u_cursor:
                for u_row in u_cursor:
                    u_row[0] = "SS-{0}-{1}-{2}".format(row[0],row[1],i)
                    i+=1
                    u_cursor.updateRow(u_row)

if __name__ == "__main__":
    # parcels = r'C:\GIS\GIS\Default.gdb\MotownParcels'
    # samples = r'C:\GIS\GIS\Default.gdb\Samples'

    param0 = arcpy.GetParameterAsText(0)
    param1 = arcpy.GetParameterAsText(1)
    scriptTool(param0,param1)

#Add data
import arcpy, random
arcpy.env.overwriteOutput = 1

analyte = 'TCE'
fc = r'C:\GIS\GIS\Default.gdb\Samples'

arcpy.management.AddField(fc,analyte,'DOUBLE',field_length = 50)

with arcpy.da.UpdateCursor(fc,analyte) as cursor:
    for row in cursor:
        row[0] = round(random.uniform(0.0,100.0),2)
        cursor.updateRow(row)

#Compare
import arcpy
arcpy.env.overwriteOutput = True

def script_tool(fc,field,std_name,std_level,std_decimals):
    # fc = r'C:\GIS\GIS\Default.gdb\Samples'
    # field = 'TCE'
    # std_name = 'RDCSRS'
    # std_level = 10
    # std_decimals = 2

    comp_field = '{0}_{1}'.format(field,std_name)

    lstFields = arcpy.ListFields(fc)
    for f in lstFields:
        if f.name =='{0}_{1}'.format(field,std_name):
            arcpy.management.DeleteField(fc,comp_field)

    arcpy.management.AddField(fc,comp_field,'TEXT')

    exceed = ''
    with arcpy.da.UpdateCursor(fc,[field,comp_field]) as cursor:
        for row in cursor:
            if round(row[0],std_decimals) > std_level:
                row[1] = 'above'
            elif round(row[0],std_decimals) <= std_level:
                row[1]  = 'below'
            else:
                row[1]  = 'no comparison'
            cursor.updateRow(row)
if __name__ == '__main__':
    param0 = arcpy.GetParameterAsText(0)
    param1 = arcpy.GetParameterAsText(1)
    param2 = arcpy.GetParameterAsText(2)
    param3 = arcpy.GetParameterAsText(3)
    param4 = arcpy.GetParameterAsText(4)

    script_tool(param0,param1,param2,param3,param4)
